=head1 NAME

HTTP::State - RFC6265bis-draft-12 Cookie jar for HTTP Clients

=head1 SYNOPSIS


  use HTTP::State ":flags";
   
  # Create a jar
  #
  my $jar=HTTP::State->new(default_flags=>FLAG_TYPE_HTTP|FLAG_TOP_LEVEL|...);

  # Requested URL and browsing context / same site flags the user agent needs
  # to manage
  #
  my $request_url="http://test.example.com";



  # Retrieve encoded cookies name/values applicable for the request
  #
  my $flags=FLAGS_TYPE_HTTP|FLAGS_TOP_LEVEL|...;
  my $cookie_header = $jar->retrieve_cookies($request_url, $flags);
  
  #       OR 

  # use the  HTTP::CookieJar compatible API, using the default flags for the
  #
  my $cookie_header = $jar->cookie_header($request_url);




  # Do a request...
  #
  my $response=user_agent->get(cookie_header=>$cookie_header);




  # Store the  Set-Cookies in the jar for the request url w
  #
  $jar->store_cookies($request_url, $flags, $response->header->{Set_Cookie});

  #     OR

  # use the HTTP::CookieJar compatible API, using the default flags
  $jar->add($request_url, $response->header->{Set_Cookie});


=head1 DESCRIPTION


An up to date cookie processing module, implementing a RFC6265-bis-draft based
"cookie jar" for HTTP user agents.  At the time of writing the current draft is
'12'. As the RFC progresses this module will be updated accordingly.

A summary of cookie handling benefits from RFC6265bis include: 

=over

=item Public suffix checking

=item Prefix cookie name processing

=item Restricted upper limit of expiry dates

=item same site status

=item API or HTTP

=item safe method

=item top level navigation

=back

Default importing of the module does not import any symbols. If you intend to
use the extended RFC6265bis features directly, please import with ":flags"
parameter for bit field masks.

For explicit encoding and decoding of cookie strings (not via a cookie jar),
please see the companion L<HTTP::State::Cookie> module. This is used internally
for encoding and decoding cookies.

=head1 SAMESITE and CONTEXT

It is necessary the user agent performs additional book keeping and testing
of what is a 'same site' request, top level navigation, reloading, document etc
to fully utilise the additional functionality available in this module.

While these tests/conditions are specified in RFC6265bis, it is not in the
scope of this module and needs to be implemented in a user-agent.  The results
of such tests are represented as bit fields, which are used to guide the
store/retrieve algorithm accordingly within this module.


=head1 COMPATIBILITY

A compatibility interface matching that of  L<HTTP::CookieJar> is available to
aid in adoption of this module.

This in theory should allow user-agents like L<HTTP::Tiny> and L<Furl> for
example to benefit from performance and security improvements with limited
changes to existing code.

To work around the lack of same site / browsing context support in the
L<HTTP::CookieJar> API, the compatibility API utilises the current values of
the 'default flags' for the cookie jar. 



=head1 API

=head2 User Agent Context Flags

Flags are used to mark the intent of a request initiated by a user-agent. 

=head3 FLAG_SAME_SITE

When this flag is set, request is considered "same-site". When unset, request
is considered "cross-site".

=head3 FLAG_TYPE_HTTP

When this flag is set, request is considered "HTTP". When unset, request is
considered "non-HTTP".

=head3 FLAG_SAFE_METH

When this flag is set, request is considered "safe". When unset, request is
considered "unsafe".

=head3 FLAG_TOP_LEVEL

When this flag is set, request is considered "top level". When unset, request
is considered "not-top-level".

=head2 Createing a cookie jar

=head3 new

  my $jar=HTTP::State->new(...);

Creates a new cookie jar object. Optional named arguments can be provided:

=over

=item default_flags

  my $jar=HTTP::State->new(default_flags=>flags);

Sets the default flags used for storing and retrieving cookies, when no defined
value is provided via C<retrieve_cookies> and C<store_cookies>

Is also the value used in the compatibility API

Default is all flags on
(FLAG_TYPE_HTTP|FLAG_TOP_LEVEL|FLAG_SAME_SITE|FLAG_SAFE_METH).


=item retrieve_sort

  my $jar=HTTP::State->new(retrieve_sort=>1||0);

A boolean enabling sorting of retrieved cookies by path length and creation
time.

Default is false (no sorting).

=item max_expiry

  my $jar=HTTP::State->new(max_expiry=>seconds);

The upper limit in duration a cookie can be valid for.  Value is in seconds.

Default is 400 days (400 * 24* 3600)

=item lax_allowing_unsafe

  my $jar=HTTP::State->new(lax_allowing_unsafe=>1||0)

A boolean enabling retrieval of cookies for unsafe methods  and default same
site, as long as cookie is no older than C<lax_allow_unsafe_timeout>

The default value is false.


=item lax_allowing_unsafe_timeout

  my $jar=HTTP::State->new(lax_allowing_unsafe_timeout=>seconds)

The timeout value (age) to use when testing the C<lax_allow_unsafe_timeout>.

The default value is 120 seconds


=item public_suffix_sub

  my $jar=HTTP::State->new(public_suffix_sub=>sub {...});

A code reference which performs public suffix lookup on a URI.  The code ref
must take a domain name as an argument and return a suffix or empty string
string if no suffix exists.

If this option is not provided, a reference to  the C<public_suffix> routine
from L<Mozilla::PublicSuffix> is used.

=back


=head2 Storing and Retrieving

For new code, these methods are preferred over the compatibility API, to make
better use of 'browsing context'.


=head3 store_cookies

  $jar->store_cookies($request_uri, $flags, $string_or_struct, ...);

Takes a C<$request_url> , browsing context C<$flags> and one or more Set-Cookie
header string values B<or> cookie_structs. Stores them in the cookie jar as per
the 'storage model' of RFC6265bis.

The exact processing of the cookies is subject to the C<$flags> bit field,
which is a combination of the 'context flags'. If set to C<undef> the current
default bit flags for the cookie jar will be used.

This method in intended to be called from a user-agent on receipt of a HTTP
response.

=head3 retrieve_cookies

  $jar->retrieve_cookies($request_url, $flags); 

Retrieves cookies from a jar, for the specified C<$request_url> according to
RFC6265bis 'cookie retrieval'. The cookies are encodes them into a string
suitable for use in a Cookie header in a HTTP request.

The exact processing of the cookies is subject to the C<$flags> bit field,
which is a combination of the 'context flags'. If set to C<undef> the current
default bit flags for the cookie jar will be used.

This method in intended to be called from a user-agent in generation of a HTTP
request.




=head2 Auxillary

=head3 get_cookies

  $jar->get_cookies($request_url);
  $jar->get_cookies($request_url, $flags); 

Takes the same arguments as C<retrieve_cookies> and matches the same cookies.
Returns a copied list of the matched cookie structures instead of a encoded
string.

=head3 get_kv_cookies

  $jar->get_kv_cookies($request_url);
  $jar->get_kv_cookies($request_url, $same_site_status, $type, $safe);

Takes the same arguments as C<retrieve_cookies> and matches the same cookies.
Returns a list of key value pairs, of names and values.



=head2 HTTP::CookieJar Compatibility Interface

These methods of the same name an intent as those found in L<HTTP::CookieJar>.
There are most certainly minor differences, but should allow a L<HTTP::State>
cookie jar to be a drop in replacement in most circumstances a
L<HTTP::CookieJar> is used. 


=head3 add

    $jar->add($url, $set_cookie_string);

Adds a cookie (as a Set_Cookie value string C<$set_cookie_string>) to the
cookie jar for the request url C<$url>. 

B<Note on SAME SITE:> It is a compatibility wrapper around C<store_cookies>
utilising the default flags for the jar as no flags for same site support can
be supplied directly.

Please refer to the L<HTTP::CookieJar> for further information.


=head3 clear

  $jar->clear;

Removes all cookies from the jar

=head3 cookies_for

  $jar->cookies_for($url);
  $jar->cookies_for($url);

Returns a list of hash refs representing a set cookie for a target C<$url>. The
elements of each hash are named as per L<HTTP::CookieJar>. Additional elements
could also exist (ie samesite)

Please refer to the L<HTTP::CookieJar> for further information.

=head3 cookie_header

  $jar->cookie_header($url)

Retrieves any applicable cookies for the target C<$url>, and encodes into a
Cookie header string value.

B<Note on SAME SITE:> It is a compatibility wrapper around
C<retrieve_cookies> utilising the default flags for the jar, as no flags
for same site support can be supplied directly.

Please refer to the L<HTTP::CookieJar> for further information.


=head3 dump_cookies

  $jar->dump_cookies;
  $jar->dump_cookies({persistent => 1});


Returns a list of strings encoded as Set Cookie values, but with additional
internal information.  The C<{persistent =E<gt> 1}> parameter forces only
persistent cookies to be processed, ignoring session cookies.  

Adjusts the creation and last access times to be relative to epoch in the local
time, instead of GMT for interoperability with L<HTTP::CookieJar>. 

=head3 load_cookies

  $jar->load_cookies(@cookies)

Takes a list of Set-Cookie type strings written out previous with
C<dump_cookies> and injects them into the cookie jar.

Decodes the creation time and last access time expected in local timezone
seconds. 

Please refer to the L<HTTP::CookieJar> for further information.


=head1 Algorithm

Some specific design tricks are used to improve the storage and retrieval
process compared to other cookie jars.

=over 

=item Keyed

Cookies are uniquely identified by the domain, path, name and  host only flag
(as per RFC6265bis). These are combined into a key, which make it easy to sort

=item Reversed Domain Names

The domain value (in the key and domain field) is stored in reverse, allowing
the use of C<index> to do domain matching of the key directly as  prefix instead of a suffix.


=item Cached public suffix

Public suffix lookups are cached and also stored in reverse for direct
substring comparison to domains.


=item Binary Search

Sorting and searching of the cookies is done firstly by 'second level domain'
of a request url using binary search provided by L<List::Insertion>

=item Preresolved subroutine references

The main retrieval subroutine is an anonymous sub instead of a method, for
better argument reuse and no unneeded dynamic lookup.

=back

=head1 PERFORMANCE

Cookie retrieval (100 random cookies added):

                   Rate http_cookiejar     http_state  protocol_http
  http_cookiejar 58.0/s             --           -96%           -97%
  http_state     1614/s          2682%             --           -19%
  protocol_http  1987/s          3325%            23%             --

=head1 TODO

Encode jar to other formats

=head1 COMPARISON TO OTHER MODULES

L<Protocol::HTTP::CookieJar> is a very fast cookie jar module, also
implementing RFC6265bis, though it requires a large number of XS modules to get
going.

L<HTTP::CookieJar> is the cookie jar suggested in the L<LWP> documentation.
While it has public suffix support, it doesn't provide the additional
conditions of RFC6265bis. It is also quite slow in comparison to this module.

=head1 AUTHOR

Ruben Westerberg, E<lt>drclaw@mac.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2023 by Ruben Westerberg

Licensed under MIT

=head1 DISCLAIMER OF WARRANTIES

THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE.
