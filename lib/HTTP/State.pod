=head1 NAME

HTTP::State - RFC6265bis-draft-12 Cookie jar for HTTP Clients

=head1 SYNOPSIS

Importing and creating a Jar

  use HTTP::State;

  my $jar=HTTP::State->new;


Add cookies from Set_Cookies header values:

  my $request_url="http://test.example.com";
  my $string1="name1=value; Max-Age=3600; Secure; SameSite=Lax";
  my $string2="name2=value; Max-Age=3600; Secure; SameSite=Lax";

  $jar->set_cookies($request_url, $string1, $string2, ...);

  # or HTTP::CookieJar compatable API
  $jar->add($request_url, $string1);
  $jar->add($request_url, $string2);


Simple (compatible) lookup matching cookies and encode (for sending to server)

  my $request_url="http://test.example.com";
  my $string=$jar->encode_request_cookies($request_url);

  # or HTTP::CookieJar compatable API but no Same-Site processing
  $jar->cookie_header($request_url);



Secure lookup and encode (RFC6265bis) from user agent parameters:

  use HTTP::State ":constants";
  my $request_url="http://test.example.com";

  #Using the bit field to specifiy the request context information
  my $string=$jar->encode_request_cookies($request_url, FLAG_SAME_SITE | FLAG_TOP_LEVEL);

Adding cookies from a cookie structure (L<HTTP::State::Cookie>):

  # Structures and function for cookies
  use HTTP::State::Cookie;
  my $request_url="http://test.example.com";
  my $cs1=cookie_struct(name=>"value");
  my $cs2=cookie_struct(name=>"value");

  $jar->set_cookies($request_url, $cs1, $cs2, ...);

Lookup and return Key value pairs (client side)

  my @kv=$jar->get_kv_cookies($url, $referer, $action);

Lookup and return copies of cookie structures 

  my @cookie_structs=$jar->get_cookies($url, $referer, $action);



=head1 DESCRIPTION

A pure Perl and up to date comparatively fast (>20x than HTTP::CookieJar)
cookie processing module. It implementing a RFC6265-bis-draft based "cookie
jar" for HTTP user agents. At the time of writing the current draft is '12'.

Default importing of the module does not import any symbols. If you 
intend to use the extended RFC6265bis features, please import with
":constants"  parameter for bit field masks.

For explicit encoding and decoding of cookie strings (not via a cookie jar),
please see the companion L<HTTP::State::Cookie> module. This is used internally
for encoding and decoding cookies.

=head2 Compatibility

To ease integration, a compatibility interface shadowing L<HTTP::CookieJar> is
provided. This in theory should allow user-agents like L<HTTP::Tiny> and L<LWP>
to benefit from the security and performance gains in the module with limited
changes to existing code.

It is able to provide some of the features of RFC6265bis:

=over

=item Public suffix checking

=item Prefix cookie name processing

=item Restricted upper limit of expiry dates

=back

=head2 Improved security/tracking reduction

However, with a few additional flags, a user-agent can specify the 'browsing
context' for more complete RFC6265bis processing:

=over

=item same site status

=item API or HTTP

=item safe method

=item top level navigation

=back

This does require the user agent to perform additional book keeping of requests
of what is same site request, top level navigation, reloading, document etc. 

While these tests/conditions are specified in RFC6265bis, it is not in the
scope of this module and needs to be implemented in a user-agent.  The results
of such tests are represented as a bit field, which is used to guide the
store/retrieve algorithm accordingly within this module.



=head2 Algorithm

Some specific design tricks are used to improve the storage and retrieval
process compared to other cookie jars.

=over 

=item Keyed

Cookies are uniquely identified by the domain, path, name and  host only flag
(as per RFC6265bis). These are combined into a key, which make it easy to sort

=item Reversed Domain Names

The domain value (in the key and domain field) is stored in reverse, allowing
the use of C<index> to do domain matching of the key directly as  prefix instead of a suffix.


=item Cached public suffix

Public suffix lookups are cached and also stored in reverse for direct
substring comparison to domains.


=item Binary Search

Sorting and searching of the cookies is done firstly by 'second level domain'
of a request url using binary search provided by L<List::Insertion>

=item Internal 'capture'

The main retrieval subroutine is actually a anonymous sub instead of an other
method, for better argument reuse and no unneeded dynamic lookup.

=back

=head1 API

=head2 Flags

Flags are used to mark the intent of a request initiated by a user-agent. 

=head3 FLAG_SAME_SITE

When this flag is set, request is considered "same-site". When unset, request
is considered "cross-site".

=head3 FLAG_TYPE_HTTP

When this flag is set, request is considered "HTTP". When unset, request is
considered "non-HTTP".

=head3 FLAG_SAFE_METH

When this flag is set, request is considered "safe". When unset, request is
considered "unsafe".

=head3 FLAG_TOP_LEVEL

When this flag is set, request is considered "top level". When unset, request
is considered "not-top-level".

=head2 Storing Cookies

=head3 add

  $jar->add($request_uri, $string_or_struct);


Intended as L<HTTP::CookieJar> compatible interface. Adds a set-cookie string
to the cookie jar. It is a wrapper around C<set_cookies>, with the C<$flags>
argument set 'wide open'.

=head3 set_cookies

  $jar->set_cookies($request_uri, $flags, $string_or_struct, ...);

Takes a request url and one or more Set-Cookie header string values B<or>
cookie_struct and inserts them into the cookie storage jar as per the 'storage
model' of RFC6265bis.

This method in intended to be called from a user-agent on receipt of a HTTP
response.


=head2 Retrieving Cookies

=head3 cookie_header

  $jar->cookie_header($request_url)

Intended as L<HTTP::CookieJar> compatible interface. It is a wrapper around
C<encode_request_cookies>, with the C<$flags> argument set 'wide open'.

=head3 encode_request_cookies

  $jar->encode_request_cookies($request_url);
  $jar->encode_request_cookies($request_url, $flags); 

Retrieves cookies applicable to the specified request_url, subject to
RFC6265bis 'cookie retrieval', and encodes them into a string suitable for use
in a Cookie header in a HTTP request.

The C<$flags> argument encodes the state of the user agent.

=head3 get_cookies

  $jar->get_cookies($request_url);
  $jar->get_cookies($request_url, $flags); 

Takes the same arguments as C<encode_request_cookies> and matches the same
cookies. Returns a copied list of the matched cookie structures instead of a
encoded string.

=head3 get_kv_cookies

  $jar->get_kv_cookies($request_url);
  $jar->get_kv_cookies($request_url, $same_site_status, $type, $safe);

Takes the same arguments as C<encode_request_cookies> and matches the same
cookies. Returns a list of key value pairs, of names and values.

=head2 File IO

=head3 slurp_set_cookies

Reads in previously spurted cookie strings from a file.  Tests incoming
cookies for expiry or parsing errors.  Does not process as normal set_cookie

Cookies are processed and sorted as they are read in to reduce memory requirements.


=head3 spurt_set_cookies

Writes out the contents of the database as set cookie strings, with additional
internal fields included.  Ignores any expired or session cookies


=head3 suffix

Wrapper around the public suffix sub. Caches results for fast subsequent
lookups. Looks up a public suffix for a given domain


=head3 second_level_domain

Like C<suffix> but returns suffix with the next level down. 
Returns the highest domain which can be set by a (sub) domain, that isn't a top
level domain/public suffix

=head3 PERFORMANCE

Cookie retrieval (100 random cookies added, 62 in jar):

                   Rate http_cookiejar     http_state  protocol_http
  http_cookiejar 58.0/s             --           -96%           -97%
  http_state     1614/s          2682%             --           -19%
  protocol_http  1987/s          3325%            23%             --

=head1 COMPARISON TO OTHER MODULES

L<Protocol::HTTP::CookieJar> is a very fast cookie jar module, also
implementing RFC6265bis, though it requires a large number of XS modules to get
going.

L<HTTP::CookieJar> is the cookie jar suggested in the L<LWP> documentation.
While it has public suffix support, it doesn't provide the additional
conditions of RFC6265bis. It is also quite slow in comparison to this module.

=head1 AUTHOR

Ruben Westerberg, E<lt>drclaw@mac.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2023 by Ruben Westerberg

Licensed under MIT

=head1 DISCLAIMER OF WARRANTIES

THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE.
