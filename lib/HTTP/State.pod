=head1 NAME

HTTP::State - Cookie (Jar) State for HTTP Clients


=head1 SYNOPSIS

Importing and creating a Jar

  use HTTP::State;          

  my $jar=HTTP::State->new;


Add cookies from set_cookies strings into jar:

  my $string1="name1=value; Max-Age=3600; Secure; SameSite=Lax";
  my $string2="name2=value; Max-Age=3600; Secure; SameSite=Lax";

  $jar->set_cookies($url, $string1, $string2);


Adding cookies from a cookie structure (L<HTTP::State::Cookie>):

  # Structures and function for cookies
  use HTTP::State::Cookie;
  my $cs1=cookie_struct(name=>"value");
  my $cs2=cookie_struct(name=>"value");

  my $request_url="http://test.example.com";
  $jar->set_cookies($request_url, $cs1, $cs2);
 

Lookup and Encoding Cookies (for sending to server)

  my $request_url="http://www.mysite.com";
  my $referer="http://thirdparty.site.com";

  my $action= "top";      # Top level navigation 

  # Encodes cookie name and values from cookies processed according to
  # RFC6265bis 

  my $string=$jar->encode_request_cookies($url, $referer, $action);

Lookup and return Key value pairs (client side)

  my @kv=$jar->get_kv_cookies($url, $referer, $action);

Lookup and return copies of cookie structures 

  my @cookie_structs=$jar->get_cookies($url, $referer, $action);



=head1 DESCRIPTION

This module brings upto date processing and an alternative implementation of a
Cookie Jar to manage HTTP State. It features:

=over

=item 

=item samesite context processing (RFC-6265bis)

=item public suffix checking (RFC-6265bis)

=item prefix cookie name processing. (RFC-6265bis)

=item Upper limit of cookie expiry dates like the (Chrome browser)

=back

It order you most of these enhanced features, your user agent or client side
program needs to 'opt in' by providing more information about 'actions' and
'context' of a request.

However if you just need a fast cookie jar an existing project, it is also
backward compatiable with L<LWP> and L<HTTP::Tiny> interfaces that don't
support these concepts just yet.

Mozilla::PublicSuffix is used for public suffix database and is only loaded
when actuall required.


=head3 PERFORMANCE

=head1 API



=head3 cookie_struct

Create a cookie structure. The return is suitable for encode_set_cookie, or
set_cookies. 

Takes a list of kv properties. The keys are either string names or fields or
the constants for the fields. 

The first pair of items is always the cookie name and the cookie value. 

Subsequent attributes fields can be in any order.

The first attibute keys is checked to see if its an attribute name (string) or
a integer constant. The remaining field keys are assumed to be of the same
perswasion 

Normalizes expiry time if set, to GMT.

=head3 set_cookies

Takes Set-Cookie header string values or cookie_struct and inserts them into
the cookie storage jar for the supplied url.

If path and domain attributes are calculated as per rfc 6525


=head3 get_cookies

Returns copies of matched cookies structs for further serialization or
processing.

=head3 get_kv_cookies

Return the matching cookie values as a key value list

=cut

=head3 encode_cookies

Encodes all matching cookies for the current context into a Cookie header
string



=head3 decode_cookie

Parses the Key value pairs from a Cookie header string. Convertes to a KV list


=head3 slurp_set_cookies

Reads in previously spurted cookie strings from a file.  Tests incomming
cookies for expiry or parsing errors.  Does not processs as normal set_cookie

Cookies are processed and sorted as they are read in to reduce memory requirements.


=head3 spurt_set_cookies

Writes out the contents of the database as set cookie strings, with additional
internal fields included.  Ignores any expired or session cookies


=head3 suffix

Wrapper around the public suffix sub. Caches results for fast subsequent
lookups. Looks up a public suffix for a given domain


=head3 second_level_domain

Like C<suffix> but returns suffix with the next level down. 
Returns the highest domain which can be set by a (sub) domain, that isn't a top
level domain/public suffix


=head1 COMPARISON TO OTHER MODULES


=head1 AUTHOR

Ruben Westerberg, E<lt>drclaw@mac.comE<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2023 by Ruben Westerberg

Licensed under MIT

=head1 DISCLAIMER OF WARRANTIES

THIS PACKAGE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR IMPLIED WARRANTIES,
INCLUDING, WITHOUT LIMITATION, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
FITNESS FOR A PARTICULAR PURPOSE.

=cut

